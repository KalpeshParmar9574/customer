  <div class="col-10 w-25 " (drop)="handleDrop($event)" (dragover)="allowDrop($event)">
          <div class="dropzone" [class.dragover]="isDragOver" formControlName="image">
            {{ selectedImageName? selectedImageName : 'Drag And Drop Image'  }}
          </div>
         
        </div>


         _addPins() {
    if (this.pinDataForm.invalid) {
      return;
    }
    const data = this.pinDataForm.getRawValue();
    
    this.uploader.onBeforeUploadItem = (fileItem: FileItem) => {
      fileItem.withCredentials = false; // This line is for avoiding cross-policy error
      this.uploader.options.additionalParameter = {
        title: data.title,
        colobrators: data.colobrators,
        privacy: data.privacy
      };
    };
  
    this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {
      if (status === 200) {
        alert('Upload successful');
        this.route.navigate(['/home']);
      } else {
        alert('Something went wrong. Please check your internet connection.');
      }
    };
  
    this.uploader.uploadAll();
  }

  drag and drop manually 

   <!-- <div " (drop)="handleDrop($event)" (dragover)="allowDrop($event)">
          <div class="dropzone" [class.dragover]="isDragOver" formControlName="image">
            {{ selectedImageName? selectedImageName : 'Drag And Drop Image'  }}
          </div>
         
        </div> -->

        ts code
        // drag and drop functionlities
  // allowDrop(event: any) {
  //   event.preventDefault();
  //   this.isDragOver = true;
  // }

  // handleDrop(event: any) {
  //   event.preventDefault();
  //   this.isDragOver = false;
  //   const files = event.dataTransfer.files;
  //   if (files.length > 0) {
  //     this.pinDataForm.patchValue({ image: files[0] });
  //     this.selectedImageName = files[0].name; 
  //   }
  // }

  // handleFileInput(event: any) {
  //   const files = event.target.files;
  //   if (files.length > 0) {
  //     this.pinDataForm.patchValue({ image: files[0] });
  //   }
  // }
